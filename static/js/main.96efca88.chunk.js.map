{"version":3,"sources":["Timer.js","ButtonControl.js","Timer-Page.js","App.js","serviceWorker.js","index.js"],"names":["Timer","formatSeconds","remainingSeconds","minutes","Math","floor","seconds","toString","length","concat","react_default","a","createElement","className","this","props","Component","ButtonControl","onClick","_this","_this2","type","value","label","TimerPage","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","handleNoSleep","document","removeEventListener","noSleep","enable","playButtonClick","setState","objectSpread","state","timerControlText","timerPlaying","timer","timeLeft","setTimeLeft","setTime","openInfo","console","log","countDown","then","Date","now","setInterval","getElementById","play","secondsLeft","round","clearInterval","NoSleep","window","addEventListener","src_Timer","src_ButtonControl","App","Timer_Page","path","Boolean","location","hostname","match","ReactDOM","render","src_App_0","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.96efca88.chunk.js","sourcesContent":["// This page is based on: https://www.youtube.com/watch?v=LAaf7-WuJJQ Wes Bos is amazing!\r\n\r\nimport React, { Component } from \"react\";\r\n\r\nclass Timer extends Component {\r\n  formatSeconds = remainingSeconds => {\r\n    const minutes = Math.floor(remainingSeconds / 60);\r\n    const seconds = Math.floor(remainingSeconds % 60);\r\n    return seconds.toString().length < 2\r\n      ? `${minutes}:0${seconds}`\r\n      : `${minutes}:${seconds}`;\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"timer\">\r\n        <div className=\"timer-background\">\r\n          <span className=\"time\">{this.formatSeconds(this.props.seconds)}</span>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Timer;\r\n","// This page is based on: https://www.youtube.com/watch?v=LAaf7-WuJJQ Wes Bos is amazing!\r\n\r\nimport React, { Component } from \"react\";\r\n\r\nclass ButtonControl extends Component {\r\n  onClick = () => {\r\n    this.props.onClick();\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <input\r\n        className=\"btn-control\"\r\n        type=\"button\"\r\n        onClick={() => this.onClick()}\r\n        value={this.props.label}\r\n      />\r\n    );\r\n  }\r\n}\r\n\r\nexport default ButtonControl;\r\n","import React, { Component } from \"react\";\r\nimport Timer from \"./Timer\";\r\nimport ButtonControl from \"./ButtonControl\";\r\nimport NoSleep from \"nosleep.js\";\r\n\r\nclass TimerPage extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.noSleep = new NoSleep();\r\n    this.state = {\r\n      timerControlText: \"Start\",\r\n      timeLeft: 1200,\r\n      timerPlaying: false\r\n    };\r\n  }\r\n\r\n  componentDidMount() {\r\n    window.addEventListener(\"click\", this.handleNoSleep);\r\n    window.addEventListener(\"touch\", this.handleNoSleep);\r\n    this.setTime(this.state.timeLeft);\r\n  }\r\n  handleNoSleep = () => {\r\n    document.removeEventListener(\"click\", this.handleNoSleep, false);\r\n    document.removeEventListener(\"touch\", this.handleNoSleep, false);\r\n    this.noSleep.enable();\r\n  };\r\n  playButtonClick = () => {\r\n    this.setState(\r\n      {\r\n        ...this.state,\r\n        timerControlText:\r\n          this.state.timerControlText === \"Start\" ? \"Pause\" : \"Start\",\r\n        timerPlaying: !this.state.timerPlaying\r\n      },\r\n      () => this.timer(this.state.timeLeft)\r\n    );\r\n  };\r\n\r\n  setTimeLeft = seconds => {\r\n    this.setState(\r\n      {\r\n        ...this.state,\r\n        timeLeft: seconds,\r\n        timerPlaying: false,\r\n        timerControlText: \"Start\"\r\n      },\r\n      () => this.timer(this.state.timeLeft)\r\n    );\r\n  };\r\n\r\n  setTime = seconds => {\r\n    this.setState({\r\n      ...this.state,\r\n      timeLeft: seconds\r\n    });\r\n  };\r\n\r\n  openInfo = () => {\r\n    console.log(\"I will eventually open a modal!!!\");\r\n  };\r\n\r\n  timer = seconds => {\r\n    const now = Date.now();\r\n    const then = now + seconds * 1000;\r\n    let countDown;\r\n    if (this.state.timerPlaying) {\r\n      countDown = setInterval(() => {\r\n        if (this.state.timeLeft % 60 === 0) {\r\n          const audio = document.getElementById(\"audio\");\r\n          audio.play();\r\n        }\r\n        const secondsLeft = Math.round((then - Date.now()) / 1000);\r\n        if (secondsLeft <= 0) {\r\n          clearInterval(this.state.countDown);\r\n          return;\r\n        }\r\n        this.setTime(secondsLeft);\r\n      }, 1000);\r\n      this.setState({\r\n        ...this.state,\r\n        countDown\r\n      });\r\n    } else {\r\n      clearInterval(this.state.countDown);\r\n    }\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"timer-page\">\r\n        <Timer seconds={this.state.timeLeft} />\r\n        <div className=\"btn-control-nav\">\r\n          <div className=\"time-controls\">\r\n            <ButtonControl onClick={() => this.setTimeLeft(300)} label={5} />\r\n            <ButtonControl onClick={() => this.setTimeLeft(600)} label={10} />\r\n            <ButtonControl onClick={() => this.setTimeLeft(900)} label={15} />\r\n            <ButtonControl onClick={() => this.setTimeLeft(1200)} label={20} />\r\n          </div>\r\n          <div className=\"function-controls\">\r\n            <ButtonControl\r\n              onClick={this.playButtonClick}\r\n              label={this.state.timerControlText}\r\n            />\r\n          </div>\r\n        </div>\r\n        <div className=\"info-control\">\r\n          <ButtonControl onClick={() => this.openInfo()} label=\"i\" />\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default TimerPage;\r\n","import React, { Component } from \"react\";\r\n// import { Router } from \"@reach/router\";\r\nimport \"./App.scss\";\r\nimport TimerPage from \"./Timer-Page\";\r\n\r\nclass App extends Component {\r\n  render() {\r\n    return (\r\n      <div className=\"App\">\r\n        {/* Fix github config to get Router working with github pages */}\r\n        {/* <Router> */}\r\n        <TimerPage path=\"/\" />\r\n        {/* </Router> */}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.scss\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}